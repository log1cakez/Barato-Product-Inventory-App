@page "/products"
@using System.Net.Http.Json
@using BaratoInventory.Core.Entities
@inject IHttpClientFactory HttpFactory
@inject IJSRuntime JSRuntime

<PageTitle>Products - Barato Product Inventory</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="row mb-3">
                <div class="col-md-6">
                    <h2 class="text-center text-md-start">Product Management</h2>
                </div>
                <div class="col-md-6 text-center text-md-end">
                    <button class="btn btn-primary" @onclick="ShowAddModal">
                        <i class="oi oi-plus"></i> Add Product
                    </button>
                </div>
            </div>

            <div class="row mb-3 justify-content-center">
                <div class="col-md-6">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search products..." @bind="searchTerm"
                            @onkeyup="OnSearchKeyUp" />
                        <button class="btn btn-outline-secondary" @onclick="SearchProducts">
                            <i class="oi oi-magnifying-glass"></i>
                        </button>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (products?.Any() == true)
                    {
                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th class="sortable" @onclick="@(() => SortBy("Id"))">
                                            ID
                                            @if (currentSortColumn == "Id")
                                            {
                                                <i class="oi @(currentSortDirection == "asc" ? "oi-sort-ascending" : "oi-sort-descending") ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="oi oi-sort-unsorted ms-1 text-muted"></i>
                                            }
                                        </th>
                                        <th class="sortable" @onclick="@(() => SortBy("Name"))">
                                            Name
                                            @if (currentSortColumn == "Name")
                                            {
                                                <i class="oi @(currentSortDirection == "asc" ? "oi-sort-ascending" : "oi-sort-descending") ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="oi oi-sort-unsorted ms-1 text-muted"></i>
                                            }
                                        </th>
                                        <th class="sortable" @onclick="@(() => SortBy("Category"))">
                                            Category
                                            @if (currentSortColumn == "Category")
                                            {
                                                <i class="oi @(currentSortDirection == "asc" ? "oi-sort-ascending" : "oi-sort-descending") ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="oi oi-sort-unsorted ms-1 text-muted"></i>
                                            }
                                        </th>
                                        <th class="sortable" @onclick="@(() => SortBy("Price"))">
                                            Price
                                            @if (currentSortColumn == "Price")
                                            {
                                                <i class="oi @(currentSortDirection == "asc" ? "oi-sort-ascending" : "oi-sort-descending") ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="oi oi-sort-unsorted ms-1 text-muted"></i>
                                            }
                                        </th>
                                        <th class="sortable" @onclick="@(() => SortBy("Quantity"))">
                                            Quantity
                                            @if (currentSortColumn == "Quantity")
                                            {
                                                <i class="oi @(currentSortDirection == "asc" ? "oi-sort-ascending" : "oi-sort-descending") ms-1"></i>
                                            }
                                            else
                                            {
                                                <i class="oi oi-sort-unsorted ms-1 text-muted"></i>
                                            }
                                        </th>
                                        <th class="text-center">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (sortedProducts?.Any() == true)
                                    {
                                        @foreach (var product in sortedProducts)
                                        {
                                            <tr>
                                                <td>@product.Id</td>
                                                <td>@product.Name</td>
                                                <td>@product.Category</td>
                                                <td>@product.Price.ToString("C")</td>
                                                <td>@product.Quantity</td>
                                                <td class="text-center">
                                                    <button class="btn btn-sm btn-info me-1" @onclick="() => ShowEditModal(product)" title="Edit">
                                                        <i class="oi oi-pencil"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteProduct(product.Id)" title="Delete">
                                                        <i class="oi oi-trash"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info text-center">
                            No products found.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@if (showAddModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Product</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="newProduct" OnValidSubmit="AddProduct">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="name" class="form-label">Name *</label>
                            <InputText id="name" class="form-control" @bind-Value="newProduct.Name" />
                            <ValidationMessage For="@(() => newProduct.Name)" />
                        </div>

                        <div class="mb-3">
                            <label for="category" class="form-label">Category *</label>
                            <InputSelect id="category" class="form-control" @bind-Value="newProduct.Category">
                                <option value="">Select Category</option>
                                <option value="Electronics">Electronics</option>
                                <option value="Furniture">Furniture</option>
                                <option value="Kitchen">Kitchen</option>
                                <option value="Clothing">Clothing</option>
                                <option value="Books">Books</option>
                                <option value="Sports">Sports</option>
                                <option value="Other">Other</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => newProduct.Category)" />
                        </div>

                        <div class="mb-3">
                            <label for="price" class="form-label">Price *</label>
                            <InputNumber id="price" class="form-control" @bind-Value="newProduct.Price" />
                            <ValidationMessage For="@(() => newProduct.Price)" />
                        </div>

                        <div class="mb-3">
                            <label for="quantity" class="form-label">Quantity *</label>
                            <InputNumber id="quantity" class="form-control" @bind-Value="newProduct.Quantity" />
                            <ValidationMessage For="@(() => newProduct.Quantity)" />
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseAddModal">Cancel</button>
                            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                Add Product
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (showEditModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Product</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="editingProduct" OnValidSubmit="UpdateProduct">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="edit-name" class="form-label">Name *</label>
                            <InputText id="edit-name" class="form-control" @bind-Value="editingProduct.Name" />
                            <ValidationMessage For="@(() => editingProduct.Name)" />
                        </div>

                        <div class="mb-3">
                            <label for="edit-category" class="form-label">Category *</label>
                            <InputSelect id="edit-category" class="form-control" @bind-Value="editingProduct.Category">
                                <option value="">Select Category</option>
                                <option value="Electronics">Electronics</option>
                                <option value="Furniture">Furniture</option>
                                <option value="Kitchen">Kitchen</option>
                                <option value="Clothing">Clothing</option>
                                <option value="Books">Books</option>
                                <option value="Sports">Sports</option>
                                <option value="Other">Other</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => editingProduct.Category)" />
                        </div>

                        <div class="mb-3">
                            <label for="edit-price" class="form-label">Price *</label>
                            <InputNumber id="edit-price" class="form-control" @bind-Value="editingProduct.Price" />
                            <ValidationMessage For="@(() => editingProduct.Price)" />
                        </div>

                        <div class="mb-3">
                            <label for="edit-quantity" class="form-label">Quantity *</label>
                            <InputNumber id="edit-quantity" class="form-control" @bind-Value="editingProduct.Quantity" />
                            <ValidationMessage For="@(() => editingProduct.Quantity)" />
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Cancel</button>
                            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                Update
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<Product>? products;
    private List<Product>? sortedProducts;
    private bool isLoading = true;
    private string searchTerm = "";
    private bool showAddModal = false;
    private bool showEditModal = false;
    private bool isSubmitting = false;
    private Product newProduct = new();
    private Product editingProduct = new();
    private string currentSortColumn = "Id";
    private string currentSortDirection = "asc";

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            isLoading = true;
            var httpClient = HttpFactory.CreateClient("API");
            products = await httpClient.GetFromJsonAsync<List<Product>>("api/products");
            ApplySorting();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading products: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SearchProducts()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            await LoadProducts();
            return;
        }

        try
        {
            isLoading = true;
            var httpClient = HttpFactory.CreateClient("API");
            products = await httpClient.GetFromJsonAsync<List<Product>>($"api/products/search?q={Uri.EscapeDataString(searchTerm)}");
            ApplySorting();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error searching products: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void OnSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            _ = SearchProducts();
        }
    }

    private void SortBy(string column)
    {
        if (currentSortColumn == column)
        {
            currentSortDirection = currentSortDirection == "asc" ? "desc" : "asc";
        }
        else
        {
            currentSortColumn = column;
            currentSortDirection = "asc";
        }
        
        ApplySorting();
        StateHasChanged();
    }

    private void ApplySorting()
    {
        if (products == null) return;

        sortedProducts = currentSortColumn switch
        {
            "Id" => currentSortDirection == "asc" 
                ? products.OrderBy(p => p.Id).ToList()
                : products.OrderByDescending(p => p.Id).ToList(),
            "Name" => currentSortDirection == "asc" 
                ? products.OrderBy(p => p.Name).ToList()
                : products.OrderByDescending(p => p.Name).ToList(),
            "Category" => currentSortDirection == "asc" 
                ? products.OrderBy(p => p.Category).ToList()
                : products.OrderByDescending(p => p.Category).ToList(),
            "Price" => currentSortDirection == "asc" 
                ? products.OrderBy(p => p.Price).ToList()
                : products.OrderByDescending(p => p.Price).ToList(),
            "Quantity" => currentSortDirection == "asc" 
                ? products.OrderBy(p => p.Quantity).ToList()
                : products.OrderByDescending(p => p.Quantity).ToList(),
            _ => products.ToList()
        };
    }

    private void ShowAddModal()
    {
        newProduct = new Product();
        showAddModal = true;
    }

    private void CloseAddModal()
    {
        showAddModal = false;
        newProduct = new Product();
    }

    private async Task AddProduct()
    {
        try
        {
            isSubmitting = true;
            var httpClient = HttpFactory.CreateClient("API");
            var response = await httpClient.PostAsJsonAsync("api/products", newProduct);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Product added successfully!");
                CloseAddModal();
                await LoadProducts();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Error adding product: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error adding product: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private void ShowEditModal(Product product)
    {
        editingProduct = new Product
        {
            Id = product.Id,
            Name = product.Name,
            Category = product.Category,
            Price = product.Price,
            Quantity = product.Quantity,
            CreatedAt = product.CreatedAt,
            UpdatedAt = DateTime.UtcNow
        };
        showEditModal = true;
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        editingProduct = new Product();
    }

    private async Task UpdateProduct()
    {
        try
        {
            isSubmitting = true;
            var httpClient = HttpFactory.CreateClient("API");
            var response = await httpClient.PutAsJsonAsync($"api/products/{editingProduct.Id}", editingProduct);

            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Product updated successfully!");
                CloseEditModal();
                await LoadProducts();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Error updating product: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating product: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task DeleteProduct(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this product?"))
        {
            try
            {
                var httpClient = HttpFactory.CreateClient("API");
                await httpClient.DeleteAsync($"api/products/{id}");
                await JSRuntime.InvokeVoidAsync("alert", "Product deleted successfully!");
                await LoadProducts();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting product: {ex.Message}");
            }
        }
    }
}
